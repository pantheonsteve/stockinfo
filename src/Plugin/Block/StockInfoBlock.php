<?php

namespace Drupal\stockinfo\Plugin\Block;

use Drupal\Core\Block\BlockBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\stockinfo\StockInfoClient;

/**
 * Provides a 'Stock Info' Block.
 *
 * @Block(
 *   id = "stockinfoblock",
 *   admin_label = @Translation("Stock Info block"),
 *   category = @Translation("Intrado IR"),
 * )
 */
class StockInfoBlock extends BlockBase implements ContainerFactoryPluginInterface {

  /**
   * @var \Drupal\stockinfo\StockInfoClient
   *   HTTP Client for data retrieval.
   */
  protected $stockInfoClient;

  /**
   * @var int
   *   Cache TTL (in seconds).
   */
  protected $cacheTtl = 3600;

  public function __construct(array $configuration, $plugin_id, $plugin_definition, StockInfoClient $stockInfoClient) {
    parent::__construct($configuration, $plugin_id, $plugin_definition);
    $this->stockInfoClient = $stockInfoClient;
  }

  /**
   * Creates an instance of the plugin.
   *
   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
   *   The container to pull out services used in the plugin.
   * @param array $configuration
   *   A configuration array containing information about the plugin instance.
   * @param string $plugin_id
   *   The plugin ID for the plugin instance.
   * @param mixed $plugin_definition
   *   The plugin implementation definition.
   *
   * @return static
   *   Returns an instance of this plugin.
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    return new static(
      $configuration,
      $plugin_id,
      $plugin_definition,
      $container->get('stockinfo')
    );
  }

  /**
   * Default block config values.
   *
   * @return string|null
   */
  protected function blockConfiguration() {
    // Check saved block config settings
    if ($config = $this->getConfiguration()) {
      return $config;
    }

    // Check `settings.php`
    if ($config = \Drupal::config('stockinfo.settings')) {
      return $config;
    }

    return NULL;
  }

  /**
   * {@inheritdoc}
   */
  public function blockForm($form, FormStateInterface $form_state) {
    $form = parent::blockForm($form, $form_state);

    $config = $this->blockConfiguration();

    $form['stock_symbol'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Stock Symbol'),
      '#description' => $this->t('Enter a Stock Symbol Here'),
      '#default_value' => isset($config['stock.symbol']) ? $config['stock_symbol'] : '',
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function blockSubmit($form, FormStateInterface $form_state) {
    parent::blockSubmit($form, $form_state);
    $values = $form_state->getValues();
    $this->configuration['stock.symbol'] = $values['stock_symbol'];
  }

  /**
   * @return array|false|object
   *   Block data, from cache or processed.
   */
  protected function blockData() {
    // Load from cache first
    if (($cache = \Drupal::cache()->get('stockinfo:data:' . \Drupal::languageManager()->getCurrentLanguage()->getId()) ) && !empty($cache)) {
      return $cache->data;
    }

    // Process data, since it's not cached
    $stock_symbol = !empty($this->configuration['stock.symbol']) ? $this->configuration['stock.symbol'] : 'MSFT';
    if ($data = $this->stockInfoClient->data($stock_symbol)) {
      return $data;
    }
  }

  /**
   * {@inheritdoc}
   */
  public function build() {
    // Check for cached data first
    $stockinfo = $this->blockData();

    // Block return
    return [
      '#theme' => 'stockinfo_block',
      '#symbol' => $stockinfo->name,
      '#price' => $stockinfo->price,
      '#change' => $stockinfo->change,
      '#volume' => $stockinfo->volume,
      '#attached' => [
          'library' => [
            'stockinfo/stockinfo-block',
          ],
      ],
      '#cache' => [
        'max-age' => $this->cacheTtl, // 1-hour cache
//        'contexts' => [
//          'url.path',
//        ],
      ],
    ];
  }

  public function label() {
//    return parent::label(); // TODO: Change the autogenerated stub
    return NULL;
  }

}
